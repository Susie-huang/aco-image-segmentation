package pe.edu.pucp.acoseg.test;

import isula.aco.exception.InvalidInputException;
import isula.image.util.ClusteredPixel;
import pe.edu.pucp.acoseg.isula.AntForImageSegmentation;
import pe.edu.pucp.acoseg.isula.EnvironmentForImageSegmentation;
import pe.edu.pucp.acoseg.isula.ImageSegmentationAntColony;

public class TestDataGenerator {

  public static final int CLUSTERS_FOR_TEST = 3;
  private static final double MAX_PHEROMONE_FOR_TEST = 1;
  private static final double MIN_PHEROMONE_FOR_TEST = 0.2;

  /**
   * Generates an Ant with a partial solution.
   * 
   * @return Ant for testing.
   * @throws InvalidInputException
   *           In case input is missing.
   */
  public static AntForImageSegmentation getAntWithPartialPartition()
      throws InvalidInputException {
    AntForImageSegmentation antForTest = new AntForImageSegmentation(
        getDummyEnvironment(), CLUSTERS_FOR_TEST);
    antForTest.setCurrentIndex(0);
    antForTest.visitNode(new ClusteredPixel(0, 0, TestDataGenerator
        .getDummyImageMatrix(), 0));
    antForTest.visitNode(new ClusteredPixel(0, 1, TestDataGenerator
        .getDummyImageMatrix(), 1));
    antForTest.visitNode(new ClusteredPixel(0, 2, TestDataGenerator
        .getDummyImageMatrix(), 2));
    antForTest.visitNode(new ClusteredPixel(1, 0, TestDataGenerator
        .getDummyImageMatrix(), 0));
    return antForTest;
  }

  /**
   * A small image matrix for testing.
   * 
   * @return Image matrix.
   */
  public static double[][] getDummyImageMatrix() {
    double[][] dummyImage = { { 85, 170, 255 }, { 85, 170, 255 },
        { 85, 170, 255 } };
    return dummyImage;
  }

  /**
   * Generates a partition of the small matrix generated by getDummyImageMatrix.
   * 
   * @return A partition.
   */
  public static ClusteredPixel[] getDummyPartition() {
    ClusteredPixel[] dummyPartition = new ClusteredPixel[9];
    dummyPartition[0] = new ClusteredPixel(0, 0, getDummyImageMatrix(), 0);
    dummyPartition[1] = new ClusteredPixel(0, 1, getDummyImageMatrix(), 1);
    dummyPartition[2] = new ClusteredPixel(0, 2, getDummyImageMatrix(), 2);
    dummyPartition[3] = new ClusteredPixel(1, 0, getDummyImageMatrix(), 0);
    dummyPartition[4] = new ClusteredPixel(1, 1, getDummyImageMatrix(), 1);
    dummyPartition[5] = new ClusteredPixel(1, 2, getDummyImageMatrix(), 2);
    dummyPartition[6] = new ClusteredPixel(2, 0, getDummyImageMatrix(), 0);
    dummyPartition[7] = new ClusteredPixel(2, 1, getDummyImageMatrix(), 1);
    dummyPartition[8] = new ClusteredPixel(2, 2, getDummyImageMatrix(), 2);

    return dummyPartition;
  }

  /**
   * Generates a sample pheromone matrix, from the partition..
   * 
   * @return Sample pheromone matrix.
   */
  public static double[][] getDummyPheromoneMatrix() {
    double[][] pheromoneMatrix = new double[getDummyPartition().length][CLUSTERS_FOR_TEST];
    for (int i = 0; i < getDummyPartition().length; i++) {
      ClusteredPixel pixel = getDummyPartition()[i];
      for (int j = 0; j < CLUSTERS_FOR_TEST; j++) {
        if (j == pixel.getCluster()) {
          pheromoneMatrix[i][j] = MAX_PHEROMONE_FOR_TEST;
        } else {
          pheromoneMatrix[i][j] = MIN_PHEROMONE_FOR_TEST;

        }
      }
    }
    return pheromoneMatrix;
  }

  /**
   * Returns an Ant with the best possible partition for the Dummy Image Matrix.
   * 
   * @return An Ant for testing.
   * @throws InvalidInputException
   *           In case of error in Environment creation.
   */
  public static AntForImageSegmentation getAntWithPerfectPartition()
      throws InvalidInputException {
    EnvironmentForImageSegmentation environment = getDummyEnvironment();

    AntForImageSegmentation antForTest = new AntForImageSegmentation(
        environment, TestDataGenerator.CLUSTERS_FOR_TEST);
    antForTest.setCurrentIndex(0);
    for (ClusteredPixel clusteredPixel : getDummyPartition()) {
      antForTest.visitNode(clusteredPixel);
    }
    return antForTest;
  }

  /**
   * Generates an Ant with a wrong partition of the Dummy Image matrix.
   * 
   * @return An ant for testing.
   * @throws InvalidInputException
   *           In case of error in Environment creation.
   */
  public static AntForImageSegmentation getAntWithTwistedPartition()
      throws InvalidInputException {
    EnvironmentForImageSegmentation environment = getDummyEnvironment();

    AntForImageSegmentation antForTest = new AntForImageSegmentation(
        environment, TestDataGenerator.CLUSTERS_FOR_TEST);
    antForTest.setCurrentIndex(0);
    for (ClusteredPixel clusteredPixel : getDummyPartition()) {
      clusteredPixel.setCluster(0);
      antForTest.visitNode(clusteredPixel);
    }
    return antForTest;
  }

  /**
   * Generates an environment for the the dummy image and with the dummy
   * pheromone matrix.
   * 
   * @return An environment for testing.
   * @throws InvalidInputException In case of error in Environment creation. 
   */
  public static EnvironmentForImageSegmentation getDummyEnvironment()
      throws InvalidInputException {
    EnvironmentForImageSegmentation environment = new EnvironmentForImageSegmentation(
        TestDataGenerator.getDummyImageMatrix(),
        TestDataGenerator.CLUSTERS_FOR_TEST);
    environment.setPheromoneMatrix(getDummyPheromoneMatrix());
    return environment;
  }

  /**
   * Generates a dummy ant colony, containining the two dummy ants defined here.
   * 
   * @return An ant colony for testing. 
   * @throws InvalidInputException In case of error in Environment creation.
   */
  public static ImageSegmentationAntColony getDummyAntColony()
      throws InvalidInputException {
    ImageSegmentationAntColony antColony = new ImageSegmentationAntColony(2,
        TestDataGenerator.CLUSTERS_FOR_TEST);
    AntForImageSegmentation antWithTwistedPartition = TestDataGenerator
        .getAntWithTwistedPartition();
    antColony.getHive().add(antWithTwistedPartition);
    AntForImageSegmentation antWithPerfectPartition = TestDataGenerator
        .getAntWithPerfectPartition();
    antColony.getHive().add(antWithPerfectPartition);
    return antColony;
  }
}
